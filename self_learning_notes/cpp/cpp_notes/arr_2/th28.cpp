/*二维数组
#include <iostream>
using namespace std;
int main()
{
	typedef int A[10][5];
	typedef int B[10];
	A a ;
	int a1[3][2] = { 1,2,
		             3,4,
		             5,6 };
	cout << a1[0][3] << endl << (a1[0])<<endl;
	B a2[5];

//二维数组按照先行后列访问

//#a[0][0]| a[0][1] | a[0][2] |  ...... |  |a[1][0]|  |  |  |  |......|
//实际存储方式
//地址公式：x[i][j]= add(x[0]) + i * 列数 + j,  i,j都是单位内存数 

二维数组在函数中作为参数传递：
int a(int x[][5])
{...}
行数不写，给首地址就行
列数必须提前确定
因为函数需要知道跳过多少内存后开始下一行

高维数组和二维类似

	int abc[5][5][5][5] = { 1,2,3,4,5 };
	abc[0][0][0][600] = 212345678;
	for (int i = 0; i < 620; i++)
		cout << *(abc[0][0][0] + i)<<endl;

}
*/