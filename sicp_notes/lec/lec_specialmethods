'''
多态polymorphism
poly function(__str__,__repr__)
重载
special methods

**一 polomorphism
    Ad Hoc ~ eg 不同函数同名 形参类型不同对应不同方法
    Paramatric~ 
    eg Generic functions:函数方法体单一 但允许多种参数传入 根据传入参数表现不同
    Inclusion~  eg Subtypes and inheritance: T v = sub-type T; // T has many subtypes
    v.method() 是sub类实现的方法
    ps: 静态编程语言: 声明变量时需要提前声明类型

    __str__,__repr__ 
    
    eval(repr(obj)) == obj

    print 会调用 str方法
    若没有定义str 就会调用repr

>>> from fractions import Fraction
>>> half = Fraction(1, 2)
>>> repr(half)
'Fraction(1, 2)'
>>> str(half) 
'1/2' 

'''
class Dog:

	def __init__(self):
		self.__repr__ = lambda: 'teddy'
		self.__str__=  lambda: 'a teddy'

	def __repr__(self):
		return 'Dog()'

	def __str__(self):
		return 'this is a dog'

def repr(x):
	return type(x).__repr__(x)

# def str(x):
# 	t = type(x)
# 	if hasattr(t, '__str__'):
# 		return t.__str__(x)
# 	else:
# 		return repr(x)

#重写str
def str(x):
	if hasattr(type(x),'__str__'):
		return type(x).__str__(x)
	return type(x).__repr__(x)
	


teddy = Dog()#实例
print(teddy) #str "Dog()"
print(repr(teddy))  
print(str(teddy)) #"Dog()"
print(teddy.__repr__()) #teddy
print(teddy.__str__()) #a teddy

'''

2 操作符重载

注记 将"+"指向object.__add__或者__radd__是python语言的默认行为
add默认从左往右，radd默认从右往左
radd重新绑定到add的别名，但是还是从右往左结合

'''

"""
是不是先调用左操作数的左结合方法，如果左操作数没有左方法，就调用右操作数的右方法
"""

class Ratio:

	def __init__(self, n, d):
		self.numer = n
		self.denom = d

	def __repr__(self):
		return 'Ratio({0}, {1})'.format(self.numer, self.denom)

	def __str__(self):
		return f'{self.numer}/{self.denom}'

	def __add__(self, other):
		if isinstance(other, int):
			n = self.numer + self.denom * other
			d = self.denom
		elif isinstance(other, float):
			return float(self) + other
		elif isinstance(other, Ratio):
			n = self.numer * other.denom + self.denom * other.numer
			d = self.denom * other.denom
		g = gcd(n,d)
		return Ratio(n//g, d//g)

	__radd__ = __add__	#
	
	def __float__(self):
		return self.numer/self.denom


def gcd(n,d):
	while n != d:
		n, d = min(n,d), abs(n-d)
	return n

print(Ratio(1,3)+1)#

print(1+Ratio(1,3))# 调用__radd__ ，因为add不支持1为object，

'''Note 
If the right operand’s type is a subclass of the left operand’s type 
and that subclass provides a different implementation of the reflected method for the operation,
 this method will be called before the left operand’s non-reflected method. 
This behavior allows subclasses to override their ancestors’ operations.

如果右操作数的类型是左操作数类型的子类，
***是子类这一点很重要***
并且该子类为该操作提供了不同的反射方法实现，
那么在调用左操作数的非反射方法之前，
将先调用此方法(即子类的反射方法)。
这种行为允许子类覆盖其祖先的操作。'''
#e.g.
class Dog:
    def __init__(self,name,owner):
        self.name=name
        self.owner=owner
        self.__repr__=lambda: "I love eating shit!woof!wow!ahahonk!"
    def __repr__(self):
        return f"Dog({self.name}, {self.owner})"
    def __add__(self,other):
        return f"{self.name} and {other.name} are friends!"
    
# dog=Dog("Rufus","John")
# print(dog)
# print(repr(dog))
# print(dog.__str__())

class Cat(Dog):
    def __init__(self,name,owner):
        self.name=name
        self.owner=owner
    def __add__(self,other):
        return "go off!"
    def __radd__(self,other):
	    return f"{self.name} and {other.name} are pals!"
def __add__(self,other):
	return "aaaaaaa"
		
    
cat=Cat("Fluffy","Jane")
dog=Dog("Rufus","John")

print(cat+dog)#add method of Dog class is called
print(dog+cat)#radd method of Cat class is called
print(cat+cat)#add method of Cat class is called
print(dog+dog)#add method of Dog class is called


class A:
    def __add__(self, other):
        return "A's add method"

    def __radd__(self, other):
        return "A's radd method"

class B:
    def __add__(self, other):
        return "B's add method"

    def __radd__(self, other):
        return "B's radd method"

a = A()
b = B()

print(a + b)  # 调用 a.__add__(b)
print(b + a)  # 调用 b.__add__(a)

class C(A):
    pass
    def __radd__(self, other):
	    return "C's radd method"
class D:
    pass

d = D()
c = C()

print(a + c)  # 调用 c.__radd__(a)
print(c + d)  # 调用 c.__add__(a)，返回 NotImplemented 后调用 a.__radd__(c)

'''
A's add method
B's add method
A's radd method
A's radd method
'''

#hw 重写代码

#ebal(" ... ")的作用是把repr产生的字符“计算”出结果
#交互模式下python只会调用repr，而非str
#print 调用__str__